// Preventing FOUC
// ---------------
.no-js {
    @include breakpoint(medium down) {
        .title-bar {
            display: none;
        }
    }
}

// Skip link
#skip a {
    font-family: 'Open Sans';
    font-weight: 900;
    font-size: .85rem;
    position: absolute;
    left: -10000px;
    top: auto;
    width: 1px;
    height: 1px;
    overflow: hidden;
    &:focus {
        left: 6px;
        top: 7px;
        height: auto;
        width: auto;
        display: block;
        font-size: 14px;
        font-weight: 700;
        padding: 15px 23px 14px;
        background: #f1f1f1;
        color: #0073aa;
        z-index: 100000;
        line-height: normal;
        text-decoration: none;
        -webkit-box-shadow: 0 0 2px 2px rgba(0, 0, 0, .6);
        box-shadow: 0 0 2px 2px rgba(0, 0, 0, .6);
    }
}

[data-whatinput="mouse"] .menu_label:focus,
[data-whatinput="mouse"] button:focus {
    outline: 0 !important;
}

// scroll top arrow
// ----------------
.scroll-top-wrapper {
    position: fixed;
    text-align: center;
    color: $michigan-blue;
    width: 3.125rem;
    height: 3rem;
    line-height: 3rem;
    right: 0;
    bottom: 0;
    transform: translate(-30%, -30%);
    padding-top: .125rem;
    cursor: pointer;
    &.headroom {
        will-change: transform;
        transition: transform 200ms ease-in-out;
        &--pinned {
            transform: translate(-30%, -30%);
        }
        &--unpinned {
            transform: translate(-30%, 130%);
        }
    }
    .fa-angle-up {
        font-size: 1.4rem;
        color: $michigan-maize;
    }
    .fa-circle {
        opacity: .15;
    }
    @include breakpoint(small only) {
        display: none;
    }
}

// typography additions
// --------------------
.thin_text_sans {
    font-family: 'Open Sans';
    font-weight: 400;
}

.normal_text_sans {
    font-family: 'Open Sans';
    font-weight: 700;
}

/// The largest named breakpoint in which to include print as a media type
/// @type Keyword
$print-breakpoint: large !default;
$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');

/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:
///  - If a string is passed, the mixin will look for it in the `$breakpoints` map, and use a media query there.
///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.
///  - If a rem value is passed, the unit will be changed to em.
///  - If an em value is passed, the value will be used as-is.
///
/// @param {Keyword|Number} $value - Breakpoint name, or px, rem, or em value to process.
///
/// @output If the breakpoint is "0px and larger", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.
@mixin breakpoint($value) {
  $str: breakpoint($value);
  $bp: index($-zf-breakpoints-keys, $value);
  $pbp: index($-zf-breakpoints-keys, $print-breakpoint);

  // If $str is still an empty string, no media query is needed
  @if $str == '' {
    @content;
  }

  // Otherwise, wrap the content in a media query
  @else {
    // For named breakpoints less than or equal to $print-breakpoint, add print to the media types
    @if $bp != null and $bp <= $pbp {
      @media print, screen and #{$str} {
        @content;
       }
    }
    @else {
      @media screen and #{$str} {
        @content;
      }
    }
  }
}
